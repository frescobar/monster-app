{"version":3,"sources":["components/card/Card.js","components/card-list/CardList.js","components/search-box/SearchBox.js","components/title/Title.js","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","key","SearchBox","handleOnSearch","type","onChange","placeholder","Title","App","props","state","searchField","bind","fetch","then","response","json","users","setState","e","this","target","value","filteredMonsters","filter","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2UAeeA,G,MAZF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACX,OAEI,yBAAKC,UAAW,kBACZ,yBAAKC,IAAG,+BAA2BF,EAAQG,GAAnC,0BAA+DC,IAAMJ,EAAQK,OACrF,4BAAKL,EAAQK,MACb,2BAAIL,EAAQM,UCGLC,G,MARD,SAAC,GAAe,IAAdC,EAAa,EAAbA,SAEZ,OACI,yBAAKP,UAAW,aACVO,EAASC,KAAI,SAAAT,GAAO,OAAI,kBAAC,EAAD,CAAMA,QAAWA,EAASU,IAAKV,EAAQG,WCMlEQ,G,MAXG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAChB,OACG,2BACAX,UAAY,aACZY,KAAO,SACPC,SAAYF,EACZG,YAAc,0BCFNC,G,MAJD,WACV,OAAQ,wBAAIf,UAAY,SAAhB,sBCuCGgB,E,kDAnCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXX,SAAS,GACTY,YAAa,IAEf,EAAKR,eAAiB,EAAKA,eAAeS,KAApB,gBAPL,E,gEASC,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACnB,SAASkB,S,qCAG1BE,GACbC,KAAKF,SAAS,CAACP,YAAaQ,EAAEE,OAAOC,U,+BAE9B,IAAD,EACyBF,KAAKV,MAA7BX,EADD,EACCA,SAASY,EADV,EACUA,YACVY,EAAmBxB,EAASyB,QAAO,SAAAjC,GACvC,OAAOA,EAAQK,KAAK6B,cAAcC,SAASf,EAAYc,kBAE3D,OACQ,yBAAKjC,UAAY,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CACCW,eAAkBiB,KAAKjB,iBAEvBoB,EAAiBI,OAAS,EAAK,kBAAC,EAAD,CAAU5B,SAAYwB,IAAwB,2D,GA/BxEK,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a1b43d2d.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Card.css\"\n\nconst Card = ({monster}) => {\n    return (\n      \n        <div className =\"card-container\">\n            <img src= {`https://robohash.org/${monster.id}?set=set2&size=160x200`} alt ={monster.name}/>\n            <h2>{monster.name}</h2>\n            <p>{monster.email}</p>\n        </div>\n        \n    );\n}\n\nexport default Card;\n","import React from 'react'\nimport Card from \"../card/Card\"\nimport \"./CardList.css\"\n\n const CardList = ({monsters}) =>{\n        \n        return ( \n            <div className =\"card-list\">\n                 {monsters.map(monster => <Card monster = {monster} key={monster.id}/>)}\n            </div>\n        )\n    }\n    export default CardList;\n","import React from 'react';\nimport \"./SearchBox.css\"\n\nconst SearchBox = ({handleOnSearch}) => {\n    return (\n       <input \n       className = 'search-box'\n       type = 'search'\n       onChange = {handleOnSearch}   \n       placeholder = \"Search a monster...\"\n       /> \n    );\n}\n\nexport default SearchBox;\n","import React from 'react';\nimport \"./Title.css\";\n\nconst Title = () => {\n    return (<h1 className = \"title\">The Monsters App</h1>);\n}\n\nexport default Title;\n","import React from 'react';\n\nimport CardList from \"./components/card-list/CardList\";\nimport SearchBox from \"./components/search-box/SearchBox\";\nimport Title from \"./components/title/Title\";\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      monsters:[],\n      searchField: ''\n    }\n    this.handleOnSearch = this.handleOnSearch.bind(this)\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n}\n\n  handleOnSearch(e){\n    this.setState({searchField: e.target.value})\n  }\n  render(){\n    const {monsters,searchField} = this.state\n    const filteredMonsters = monsters.filter(monster =>{\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n  return (\n          <div className = 'app'>\n            <Title />\n            <SearchBox \n             handleOnSearch = {this.handleOnSearch}/\n             >\n            {filteredMonsters.length > 0 ? (<CardList monsters = {filteredMonsters}/>) : (<h2>No monster found :( :(</h2>)}\n          </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}